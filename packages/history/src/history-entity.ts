import {
  Column,
  EntitySubscriberInterface,
  InsertEvent,
  RemoveEvent,
  UpdateEvent,
} from 'typeorm';
import { monotonicFactory } from 'ulid';
import { HistoryActionType } from './history-action.enum';
const ulid = monotonicFactory();
export function HistoryActionColumn() {
  return Column({
    type: 'enum',
    enum: Object.values(HistoryActionType),
    default: HistoryActionType.CREATED,
  });
}
export interface HistoryEntityInterface {
  id: number | string;
  originalID: number | string;

  action: HistoryActionType;

  deleted: boolean;

  // Generated by ulid
  historyReportID: string;
}
export interface HistoryEntitySubscriberInterface<
  EntityType,
  HistoryEntityType
> extends EntitySubscriberInterface<EntityType> {
  createHistoryEntity(
    entity: EntityType,
  ): HistoryEntityType | Promise<HistoryEntityType>;

  beforeInsertHistory(
    history: HistoryEntityType,
  ): HistoryEntityType | Promise<HistoryEntityType>;
  afterInsertHistory(history: HistoryEntityType): void | Promise<void>;
  beforeUpdateHistory(
    history: HistoryEntityType,
  ): HistoryEntityType | Promise<HistoryEntityType>;
  afterUpdateHistory(history: HistoryEntityType): void | Promise<void>;
  beforeRemoveHistory(
    history: HistoryEntityType,
  ): HistoryEntityType | Promise<HistoryEntityType>;
  afterRemoveHistory(history: HistoryEntityType): void | Promise<void>;
}
export abstract class HistoryEntitySubscriber<
  EntityType,
  HistoryEntityType extends HistoryEntityInterface & EntityType
> implements HistoryEntitySubscriberInterface<EntityType, HistoryEntityType> {
  public beforeInsertHistory(
    history: HistoryEntityType,
  ): HistoryEntityType | Promise<HistoryEntityType> {
    return history;
  }
  public afterInsertHistory(history: HistoryEntityType): void | Promise<void> {}
  public beforeUpdateHistory(
    history: HistoryEntityType,
  ): HistoryEntityType | Promise<HistoryEntityType> {
    return history;
  }
  public afterUpdateHistory(history: HistoryEntityType): void | Promise<void> {}
  public beforeRemoveHistory(
    history: HistoryEntityType,
  ): HistoryEntityType | Promise<HistoryEntityType> {
    return history;
  }
  public afterRemoveHistory(history: HistoryEntityType): void | Promise<void> {}
  public abstract listenTo(): Function;
  public abstract createHistoryEntity(
    entity: EntityType,
  ): HistoryEntityType | Promise<HistoryEntityType>;

  public async afterInsert(event: InsertEvent<EntityType>): Promise<void> {
    if (Object.keys(event.entity).includes('action')) {
      return;
    }
    let history = await this.createHistoryEntity(event.entity);
    delete history.id;
    history.action = HistoryActionType.CREATED;
    history.historyReportID = ulid();
    history = await this.beforeInsertHistory(history);
    await event.manager.save(history);
    await this.afterInsertHistory(history);
  }

  public async afterUpdate(event: UpdateEvent<EntityType>): Promise<void> {
    if (Object.keys(event.databaseEntity).includes('action')) {
      return;
    }
    let history = await this.createHistoryEntity(event.entity);
    delete history.id;
    history.action = history.deleted
      ? HistoryActionType.DELETED
      : HistoryActionType.UPDATED;
    history.historyReportID = ulid();
    history = await this.beforeUpdateHistory(history);
    await event.manager.save(history);
    await this.afterUpdateHistory(history);
  }

  public async beforeRemove(event: RemoveEvent<EntityType>): Promise<void> {
    if (
      !event ||
      !event.entity ||
      Object.keys(event.databaseEntity).includes('action')
    ) {
      return;
    }
    let history = await this.createHistoryEntity(event.entity);
    delete history.id;
    history.deleted = true;
    history.action = HistoryActionType.DELETED;
    history.historyReportID = ulid();
    history = await this.beforeRemoveHistory(history);
    await event.manager.save(history);
    await this.afterRemoveHistory(history);
  }
}
